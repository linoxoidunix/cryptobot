# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.TOKEN }}
        submodules: 'recursive'
    
    # Install dependencies
    - name: Install some developer dependencies
      run: |
          sudo apt update    
          sudo apt-get install -y build-essential libssl-dev python3-dev git cmake libcurl4-openssl-dev libuv1 libuv1-dev

    # Cache Boost
    - name: Cache Boost
      id: cache_boost
      uses: actions/cache@v4
      with:
        path: |
          /usr/local/boost
        key: boost_${{ runner.os }}_${{ hashFiles('boost_1_83_0.tar.gz') }}
        restore-keys: |
          boost_${{ runner.os }}_
          boost_

    # Check if the Boost cache was restored
    - name: Check if Boost cache was restored
      id: cache_check
      run: echo "BOOST_CACHE_HIT=${{ steps.cache_boost.outputs.cache-hit }}" >> $GITHUB_ENV

    # Download Boost if cache not restored
    - name: Download Boost
      if: env.BOOST_CACHE_HIT != 'true'
      run: |
          wget https://boostorg.jfrog.io/artifactory/main/release/1.83.0/source/boost_1_83_0.tar.gz
          tar -xzf boost_1_83_0.tar.gz

    # Build and Install Boost if cache not restored
    - name: Build and install Boost 
      if: env.BOOST_CACHE_HIT != 'true'
      run: |
        cd boost_1_83_0
        ./bootstrap.sh
        sudo ./b2 install --prefix=/usr/local

    # # Set up Boost environment variables
    # - name: Set Boost environment
    #   run: echo "/usr/local/lib" | sudo tee -a /etc/ld.so.conf.d/boost.conf && sudo ldconfig


    # # Update references
    # - name: Git Submodule Update
    #   run: |
    #     git submodule update --force --recursive --init --remote
   
    # - name: Configure CMake DBG
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   # run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} --target aot
    #   # run: cmake --preset cryptobot_dbg -S ${{github.workspace}} -B ${{github.workspace}}/build
    #   run: cmake --preset cryptobot_dbg

    # - name: Configure CMake RELEASE
    # # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    # # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    # # run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} --target aot
    # # run: cmake --preset cryptobot_dbg -S ${{github.workspace}} -B ${{github.workspace}}/build
    #   run: cmake --preset cryptobot_release

    # - name: Build DBG
    #   # Build your program with the given configuration
    #   run: cmake --build --preset build_dbg
    
    # - name: Build RELEASE
    #   # Build your program with the given configuration
    #   run: cmake --build --preset build_release
    
    # - name: Test
    #   # working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --preset tests

